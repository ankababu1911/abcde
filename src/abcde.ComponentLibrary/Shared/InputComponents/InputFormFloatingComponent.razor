@inherits InputBase<string>

<div class="form-floating mb-3">
    <input type="@InputType" id="@Id" class="form-control" autocomplete="username" aria-required="true" @bind="@CurrentValue" @bind:event="oninput" @onchange="OnChange" />
    <label asp-for="@Id" class="form-label">@Label</label>
    <ValidationMessage For="@ValidationFor" />
</div>

@code {

    [Parameter]
    public string? Id { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public string Css { get; set; }

    [Parameter]
    public string InputType { get; set; } = "text";

    [Parameter, EditorRequired]
    public Expression<Func<string>> ValidationFor { get; set; } = default!;

    [Parameter]
    public EventCallback OnChange { get; set; }

    /// <summary>
    /// This method is required to convert the string value back to whatever the original type was. As
    /// we're only binding to strings just a case of setting the result parameter to equal the value parameter
    /// </summary>
    /// <param name="value"></param>
    /// <param name="result"></param>
    /// <param name="validationErrorMessage"></param>
    /// <returns></returns>
    protected override bool TryParseValueFromString(string? value, out string result, out string validationErrorMessage)
    {
        result = value;
        validationErrorMessage = null;
        return true;
    }
}